from objetos.bloco import Bloco
from objetos.powerup import Powerup
import arcade

class Fase:
    """"
    Na classe fase, os mapas do jogo se encontram, alem da determinação dos tipos de blocos que cada cenário terá.
    """
    def __init__(self):
        self.lista_power_up = arcade.SpriteList()
        self.blocos = arcade.SpriteList()
        self.conjunto_fase()
    #Dependendo do estado do jogo de quando eu chamar esse metodo, a função determinar fase me mandara umm determinado tipo de mapa.
    def determinar_fase(self,estado_jogo):
        if estado_jogo ==1:
            self.desenhar_cenario(self.fase1)
        if estado_jogo ==2:
            self.desenhar_cenario(self.fase2)
        if estado_jogo ==3:
            self.desenhar_cenario(self.fase3)
        if estado_jogo ==4:
            self.desenhar_cenario(self.fase4)
        if estado_jogo ==5:
            self.desenhar_cenario(self.fase5)

    #Aqui temos os mapas desenhados em forma de matrizes, para conseguirmos fazer melhores desenhos das fases.
    def conjunto_fase(self):
        self.fase1=[[1,1,2,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
                    [1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0],              
                    [1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],
                    [1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,1,0,0,2,2,0,0,1,0,0,1,1,2,1,1,0,0],
                    [0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,0,0],
                    [0,0,0,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0],
                    [0,0,0,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0],
                    [0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0],
                    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]

        self.fase2=[[0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0],
                    [0,0,2,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],              
                    [0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0],
                    [0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0,2,0],
                    [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
                    [0,0,0,2,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,0,0],
                    [0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,2,0,0],
                    [0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
                    [0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]

        self.fase3=[[0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0],
                    [0,0,0,0,1,0,0,1,0,0,1,1,1,1,0,0,1,0,0,1,0,0,0,0],              
                    [2,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,2],
                    [0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0],
                    [0,1,0,0,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,0,0,0,1,0],
                    [1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1],
                    [0,1,0,0,0,0,0,1,1,2,0,1,1,0,2,1,1,0,0,0,0,0,1,0],
                    [0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,0],
                    [0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0],
                    [0,0,0,0,1,0,0,0,1,0,1,1,1,1,0,1,0,0,0,1,0,0,0,0],
                    [0,0,0,0,0,1,0,1,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0]]
        
        self.fase4 =[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1,0,0],              
                    [0,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0],
                    [0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0],
                    [0,0,1,1,1,0,0,0,1,1,1,2,2,1,1,1,0,0,0,1,1,1,0,0],
                    [0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0],
                    [0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0],
                    [0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0],
                    [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
                    [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
                    [0,0,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]

        self.fase5 =[[1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1],
                    [1,0,0,0,1,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1],              
                    [1,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,1],
                    [1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
                    [1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
                    [1,0,0,0,1,1,0,0,0,0,0,0,2,0,0,0,0,0,1,1,0,0,0,1],
                    [1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1],
                    [1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1],
                    [1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1],
                    [1,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,1],
                    [1,0,0,0,1,1,1,2,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,1],
                    [1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1]]
        
    #A função desenhar cenário irá pegar um dos mapas acima e colocar em forma de listas, para ser desenhado na classe do jogo.
    def desenhar_cenario(self,fase):
        for z in range(12):
            linha = fase[z]
            x = 0
            for i in range(24):
                if fase[z][i]==1:
                    hy = 800-100-(32*z)
                    bloco = ((Bloco(x+32,hy+64,0,'jogo/objetos/imagens/bloco.png')))
                    self.blocos.append(bloco)
                    x += 32
                elif fase[z][i]==2:
                    hy = 800-100-(32*z)
                    power_up = ((Powerup('jogo/objetos/imagens/bloco_powerup.png',x+32,hy+64,0)))
                    self.lista_power_up.append(power_up)
                    x += 32
                else:
                    x += 32

    #Irá retornar a lista com os blocos
    def get_fase(self):
        return self.blocos
    #Irá retornar a lista com os blocos de power_up
    def get_power_up(self):
        return self.lista_power_up
